name: Pylint & PR comment

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
        poetry-version: [1.1.11]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry ${{ matrix.poetry-version }}
        run: |
          python -m ensurepip
          python -m pip install --upgrade pip
          python -m pip install poetry==${{ matrix.poetry-version }}

#creates a cache in the build pipeline and keys it by the hash of your poetry.lock. 
#Cache will be busted if your packages change
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}

#specifies a cacheable path on the filesystem for the virtualenv to reside in.
      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

#installs the dependencies using Poetry, but only if there was not a cache hit. (Time saver in large projects.)
      - name: Install Dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'

      # - name: Code Quality
      #   run: poetry run black . --check

      - name: Test with pylint
        run: |
          poetry run pylint ./src --exit-zero
          OUTPUT=$(poetry run pylint ./src --exit-zero)
          echo "OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post result to PR
        uses: mshick/add-pr-comment@v1
        with:
          message: ${{ env.OUTPUT }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: false # This is the default       



